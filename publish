#!/bin/bash

SCRIPTPATH="$(readlink -f 2>/dev/null || perl -MCwd -e 'print Cwd::abs_path shift' $0)"
SCRIPTDIR="$(dirname "${SCRIPTPATH}")"


## Test if there are uncommited changes

if test "x$(git status --porcelain=v1 2>/dev/null)" != "x"
then
	echo "Error: There are uncommited changes or untracked files."
	exit 1
fi

if test "x$(git describe --exact-match master 2>/dev/null)" != "x"
then
	echo "Info: This commit has already been published."
	exit 0
fi

if ! ( git remote get-url origin 2>/dev/null | grep -qE "github\.com|gitlab\.com" >/dev/null )
then
	echo "Error: Repo not linked to Github.com or Gitlab.com"
	exit 1
fi

## Run npm test

TESTSCRIPT="$("${SCRIPTDIR}/get-json" --file "package.json" --key "scripts.test")"
if test "x${TESTSCRIPT}" != "x" && test "x${TESTSCRIPT}" != 'xecho "Error: no test specified" && exit 1'
then
	echo "Run npm test"
	if ! npm test
	then
		echo "Error: npm test not successful." >&2
		exit 1
	fi
fi

## Parse arguments

if test "x$1" = "x" || test "x$1" = "xpatch"
then
	LEVEL=patch
elif test "x$1" = "xpatch" || test "x$1" = "xminor" || test "x$1" = "xmajor"
then
	LEVEL="$1"
else
	echo "Usage: publish [patch|minor|major]"
	exit 2
fi

## Create a new version

if test "x$(git tag)" = "x"
then
	# no tags, publish version 1.0.0:
	npm version 1.0.0 --allow-same-version -m "Version %s" || exit 1
else
	npm version ${LEVEL} -m "Version %s" || exit 1
fi

## Publish

git push && git push --tags && npm publish
